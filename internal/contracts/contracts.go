package contract

import (
	"context"
	"crypto/ecdsa"
	"errors"
	"fmt"
	"math/big"
	"time"
	"web3-account-abstraction-api/generated/abi/account"
	"web3-account-abstraction-api/generated/abi/accountfactory"
	"web3-account-abstraction-api/generated/abi/entrypoint"
	"web3-account-abstraction-api/generated/abi/paymaster"
	"web3-account-abstraction-api/internal/model"

	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/ethereum/go-ethereum/rpc"
)

type Address = common.Address

var (
	zeroAddress             = common.HexToAddress("0x")
	accountCreationByteCode = common.FromHex("0x60a0604052600060025534801561001557600080fd5b506040516111a53803806111a583398101604081905261003491610075565b600180546001600160a01b0319166001600160a01b03938416179055166080526100a8565b80516001600160a01b038116811461007057600080fd5b919050565b6000806040838503121561008857600080fd5b61009183610059565b915061009f60208401610059565b90509250929050565b608051611095610110600039600081816101f20152818161028201528181610327015281816103c40152818161047e015281816105710152818161061c015281816106f00152818161078d0152818161083f0152818161097601526109f901526110956000f3fe6080604052600436106100d65760003560e01c806361bc221a1161007f578063b61d27f611610059578063b61d27f614610216578063b7f0583614610236578063c399ec881461024b578063e9942e671461026057600080fd5b806361bc221a146101955780638da5cb5b146101ab578063b0d691fe146101e357600080fd5b80634782f779116100b05780634782f7791461014d5780634a58db191461016d5780634d44560d1461017557600080fd5b806306661abd146100e257806319822f7c1461010b57806344004cc11461012b57600080fd5b366100dd57005b600080fd5b3480156100ee57600080fd5b506100f860005481565b6040519081526020015b60405180910390f35b34801561011757600080fd5b506100f8610126366004610e2d565b610275565b34801561013757600080fd5b5061014b610146366004610e96565b61031c565b005b34801561015957600080fd5b5061014b610168366004610ed7565b6103b9565b61014b61047c565b34801561018157600080fd5b5061014b610190366004610ed7565b610515565b3480156101a157600080fd5b506100f860025481565b3480156101b757600080fd5b506001546101cb906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b3480156101ef57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006101cb565b34801561022257600080fd5b5061014b610231366004610f03565b610611565b34801561024257600080fd5b5061014b6106e5565b34801561025757600080fd5b506100f8610789565b34801561026c57600080fd5b5061014b610834565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103005760405162461bcd60e51b8152602060048201526024808201527f4f6e6c7920656e747279506f696e742063616e2063616c6c2074686973206d656044820152631d1a1bd960e21b60648201526084015b60405180910390fd5b61030a84846108c3565b90506103158261096b565b9392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061035d57506001546001600160a01b031633145b6103a95760405162461bcd60e51b815260206004820152601760248201527f6e6f74204f776e6572206f7220456e747279506f696e7400000000000000000060448201526064016102f7565b6103b4838383610a65565b505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614806103fa57506001546001600160a01b031633145b6104465760405162461bcd60e51b815260206004820152601760248201527f6e6f74204f776e6572206f7220456e747279506f696e7400000000000000000060448201526064016102f7565b6040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156103b4573d6000803e3d6000fd5b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf90000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03919091169063b760faf99034906024016000604051808303818588803b1580156104fa57600080fd5b505af115801561050e573d6000803e3d6000fd5b5050505050565b6001546001600160a01b0316331461056f5760405162461bcd60e51b815260206004820152601f60248201527f4f6e6c79206f776e65722063616e2063616c6c2074686973206d6574686f640060448201526064016102f7565b7f00000000000000000000000000000000000000000000000000000000000000006040517f205c28780000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b1580156105f557600080fd5b505af1158015610609573d6000803e3d6000fd5b505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061065257506001546001600160a01b031633145b61069e5760405162461bcd60e51b815260206004820152601760248201527f6e6f74204f776e6572206f7220456e747279506f696e7400000000000000000060448201526064016102f7565b6106df848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ae592505050565b50505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061072657506001546001600160a01b031633145b6107725760405162461bcd60e51b815260206004820152601760248201527f6e6f74204f776e6572206f7220456e747279506f696e7400000000000000000060448201526064016102f7565b6002805490600061078283610f8c565b9190505550565b60007f00000000000000000000000000000000000000000000000000000000000000006040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610fb3565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061087557506001546001600160a01b031633145b6108c15760405162461bcd60e51b815260206004820152601760248201527f6e6f74204f776e6572206f7220456e747279506f696e7400000000000000000060448201526064016102f7565b565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c829052603c8120600061094082610906610100880188610fcc565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b5592505050565b6001549091506001600160a01b0380831691161461095f576001610962565b60005b95945050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109ef5760405162461bcd60e51b8152602060048201526024808201527f4f6e6c7920656e747279506f696e742063616e2063616c6c2074686973206d656044820152631d1a1bd960e21b60648201526084016102f7565b8015610a625760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168260405160006040518083038185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e61050e565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526103b4908490610b7f565b600080846001600160a01b03168484604051610b01919061101a565b60006040518083038185875af1925050503d8060008114610b3e576040519150601f19603f3d011682016040523d82523d6000602084013e610b43565b606091505b50915091508161050e57805160208201fd5b600080600080610b658686610c09565b925092509250610b758282610c56565b5090949350505050565b600080602060008451602086016000885af180610ba2576040513d6000823e3d81fd5b50506000513d91508115610bba578060011415610bc7565b6001600160a01b0384163b155b156106df576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016102f7565b60008060008351604103610c435760208401516040850151606086015160001a610c3588828585610d5e565b955095509550505050610c4f565b50508151600091506002905b9250925092565b6000826003811115610c6a57610c6a611049565b03610c73575050565b6001826003811115610c8757610c87611049565b03610cbe576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115610cd257610cd2611049565b03610d0c576040517ffce698f7000000000000000000000000000000000000000000000000000000008152600481018290526024016102f7565b6003826003811115610d2057610d20611049565b03610d5a576040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600481018290526024016102f7565b5050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610d995750600091506003905082610e23565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610ded573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610e1957506000925060019150829050610e23565b9250600091508190505b9450945094915050565b600080600060608486031215610e4257600080fd5b833567ffffffffffffffff811115610e5957600080fd5b84016101208187031215610e6c57600080fd5b95602085013595506040909401359392505050565b6001600160a01b0381168114610a6257600080fd5b600080600060608486031215610eab57600080fd5b8335610eb681610e81565b92506020840135610ec681610e81565b929592945050506040919091013590565b60008060408385031215610eea57600080fd5b8235610ef581610e81565b946020939093013593505050565b60008060008060608587031215610f1957600080fd5b8435610f2481610e81565b935060208501359250604085013567ffffffffffffffff80821115610f4857600080fd5b818701915087601f830112610f5c57600080fd5b813581811115610f6b57600080fd5b886020828501011115610f7d57600080fd5b95989497505060200194505050565b600060018201610fac57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610fc557600080fd5b5051919050565b6000808335601e19843603018112610fe357600080fd5b83018035915067ffffffffffffffff821115610ffe57600080fd5b60200191503681900382131561101357600080fd5b9250929050565b6000825160005b8181101561103b5760208186018101518583015201611021565b506000920191825250919050565b634e487b7160e01b600052602160045260246000fdfea264697066735822122020e9bfb3feacac9a8c597c6bba22eeb46f77e3dad208d4a984c9022ffbc7434d64736f6c63430008180033")
)

type Contracts struct {
	EntryPoint     *entrypoint.EntryPoint
	AccountFactory *accountfactory.AccountFactory
	Paymaster      *paymaster.Paymaster

	chainId                   *big.Int
	privateKey                *ecdsa.PrivateKey
	publicKey                 *ecdsa.PublicKey
	paymasterSignerPrivateKey *ecdsa.PrivateKey
	paymasterSignerPublicKey  *ecdsa.PublicKey

	ownerAddress          Address
	EntryPointAddress     Address
	PaymasterAddress      Address
	AccountFactoryAddress Address

	client *ethclient.Client
}

func (c *Contracts) SetChainId(chainId *big.Int) {
	c.chainId = chainId
}

func (c *Contracts) SetPublicAndPrivateKey(publicKey *ecdsa.PublicKey, privateKey *ecdsa.PrivateKey) {
	c.privateKey = privateKey
	c.publicKey = publicKey

	c.ownerAddress = crypto.PubkeyToAddress(*c.publicKey)
}

func (c *Contracts) SetPaymasterSignerPublicAndPrivateKey(publicKey *ecdsa.PublicKey, privateKey *ecdsa.PrivateKey) {
	c.paymasterSignerPrivateKey = privateKey
	c.paymasterSignerPublicKey = publicKey
}

func (c *Contracts) SetRPCClient(client *ethclient.Client) {
	c.client = client
}

func (c *Contracts) getTransactionOps() (*bind.TransactOpts, error) {
	auth, err := bind.NewKeyedTransactorWithChainID(c.privateKey, c.chainId)
	if err != nil {
		return nil, err
	}

	nonce, err := c.getNonce()
	if err != nil {
		return nil, err
	}

	gasPrice, err := c.client.SuggestGasPrice(context.Background())
	if err != nil {
		return nil, err
	}

	// Set default value
	auth.Nonce = big.NewInt(int64(nonce))
	auth.Value = big.NewInt(0)
	auth.GasLimit = uint64(1_000_000)
	auth.GasPrice = gasPrice

	return auth, nil
}

func (c *Contracts) getNonce() (uint64, error) {
	return c.client.PendingNonceAt(context.Background(), c.ownerAddress)
}

func (c *Contracts) OwnerAddress() common.Address {
	return c.ownerAddress
}

func (c *Contracts) GetSenderAddres(salt [32]byte) (common.Address, error) {
	abi, _ := account.AccountMetaData.GetAbi()

	packedArguments, err := abi.Pack("", c.ownerAddress, c.EntryPointAddress)
	if err != nil {
		return zeroAddress, err
	}
	initHash := append(accountCreationByteCode, packedArguments...)
	return crypto.CreateAddress2(c.AccountFactoryAddress, salt, crypto.Keccak256(initHash)), nil
}

func (c *Contracts) GetSenderAddressFromInitCode(initCode []byte) (common.Address, error) {
	txOps, err := c.getTransactionOps()
	if err != nil {
		return zeroAddress, err
	}

	tx, err := c.EntryPoint.GetSenderAddress(txOps, initCode)
	_, err = bind.WaitMined(context.Background(), c.client, tx)

	if err == nil {
		return zeroAddress, errors.New("getSenderAddress not return error")
	}
	dataErr, ok := err.(rpc.DataError)
	if !ok {
		return zeroAddress, errors.New("error converting err to rpc.DataError")
	}

	errorData := dataErr.ErrorData()
	errorMap, ok := errorData.(map[string]interface{})
	if !ok {
		return zeroAddress, errors.New("error converting errorData to errorMap")
	}

	data, ok := errorMap["data"].(string)
	if !ok {
		return zeroAddress, errors.New("error converting errorMap[data] to string")
	}

	byteData := common.FromHex(data)
	if len(byteData) < 32 {
		return zeroAddress, errors.New("error data format not match")
	}

	return common.BytesToAddress(byteData[16:]), nil
}

func (c *Contracts) GetInitCode(salt [32]byte) ([]byte, error) {
	accountFactoryCallData, err := c.GetAccountFactoryCallData(c.ownerAddress, salt, c.EntryPointAddress)
	if err != nil {
		return nil, err
	}
	return append(c.AccountFactoryAddress.Bytes(), accountFactoryCallData...), nil
}

func (c *Contracts) GetAccountFactoryCallData(owner Address, salt [32]byte, epAddress Address) ([]byte, error) {
	abi, _ := accountfactory.AccountFactoryMetaData.GetAbi()
	return abi.Pack("createAccount", owner, salt, epAddress)
}

func (c *Contracts) GetPaymasterSignature(userOp model.UserOperation) (signature []byte, validAfter int64, validUntil int64, err error) { // signature, validAfter, validUntil, error
	now := time.Now()
	validAfter = now.Unix()
	validUntil = now.Add(1 * time.Hour).Unix()

	hash, err := c.Paymaster.GetHash(
		&bind.CallOpts{
			Pending: false,
		}, paymaster.PackedUserOperation(userOp.Pack()),
		big.NewInt(int64(validUntil)),
		big.NewInt(int64(validAfter)))
	if err != nil {
		return
	}

	signature, err = c.personalSign(hash[:], c.paymasterSignerPrivateKey)
	return
}

func (c *Contracts) Sign(data []byte) ([]byte, error) {
	return c.personalSign(data, c.privateKey)
}

func (c *Contracts) personalSign(data []byte, privateKey *ecdsa.PrivateKey) ([]byte, error) {
	fullMessage := fmt.Sprintf("\x19Ethereum Signed Message:\n%d%s", len(data), data)
	hash := crypto.Keccak256Hash([]byte(fullMessage))
	signatureBytes, err := crypto.Sign(hash[:], privateKey)
	if err != nil {
		return nil, err
	}

	signatureBytes[64] += 27
	return signatureBytes, nil
}
